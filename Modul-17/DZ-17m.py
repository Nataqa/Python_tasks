# Напишите программу, которой на вход подается последовательность чисел через пробел, а также
# запрашивается у пользователя любое число. В качестве задания повышенного уровня сложности
# можете выполнить проверку соответствия указанному в условии ввода данных.

# Далее программа работает по следующему алгоритму:
# 1/ Преобразование введённой последовательности в список
# 2/ Сортировка списка по возрастанию элементов в нем(для реализации сортировки
# определите функцию)
# Устанавливается номер позиции элемента, который меньше введенного пользователем
# числа, а следующий за ним больше или равен этому числу.

# При установке позиции элемента воспользуйтесь алгоритмом двоичного поиска, который
# был рассмотрен в этом модуле.Реализуйте его также отдельной функцией.

# Подсказка
# Помните, что у вас есть числа, которые могут не соответствоватьзаданному
# условию.В этом случае необходимо вывести соответствующее сообщение

# функция сортировки вставками
def sort_str(my_str, my_len):
    for i in range(1, my_len):
        x = my_str[i]
        idx = i
        while idx > 0 and my_str[idx-1] > x:
            my_str[idx] = my_str[idx-1]
            idx -= 1
        my_str[idx] = x
    return my_str
# функция двоичного поиска
def BinSearch(my_str, elem, my_len):
    i = 0
    j = my_len-1
    mid = int(j/2)
    while my_str[mid] != elem and i < j:
        if elem > my_str[mid]:
            i = mid+1
        else:
            j = mid-1
        mid = int((i+j)/2)
    return mid

#Вводим последовательность чисел через пробел с проверкой ввода
flag = True
while flag:
    try:
        str_input = list(map(float, input("Введите числа через пробел:").split()))
        flag = False
    except:
        print('Ошибка.Введенные данные не являются числом!!!\n')

# Вводим произвольное число с проверкой ввода
flag = True
while flag:
    try:
        number_input = float(input("Введите произвольное число: "))
        flag = False
    except:
        print('Ошибка.Введенные данные не являются числом!!!\n')

# Определяем длину введенной последовательности
len_my_str = len(str_input)

# Вызываем функцию сортировки
sort_str(str_input, len_my_str)
print(f'Отсортированная последовательность: {str_input}')
print(f'Введенное число: {number_input}')
# проверяем как соотносится введенное число с границами последовательности
if number_input <= str_input[0]:
    print(f'Число в последовательности большее или равное введенному: {str_input[0]} с номером элемента 0. \n'
          f'Числа в последовательности меньше введенного нет. ')
elif number_input > str_input[len_my_str-1]:
    print(f'Число в последовательности меньше введенного: {str_input[len_my_str-1]}. \n'
          f'Числа в последовательности больше введенного нет.'
          f'\nНомер искомого элемента, меньшего введенного {len_my_str-1}.')
else:
    # Проверяем есть ли введенное число в последовательности
    if number_input in str_input:
        result = BinSearch(str_input, number_input, len_my_str)
        while str_input[result] == str_input[result-1]:
            result -= 1
        print(f'Число в последовательности меньше введенного: {str_input[result - 1]}. \n'
              f'Число в последовательности большее или равное введенному: {str_input[result]}. '
              f'\nНомер искомого элемента, меньшего введенного: {result-1}.')
    else:
        print('Введенного числа нет в последовательности.')
        index = 0
        for x, y in zip(str_input, str_input[1:]):
            index += 1
            if (x < number_input) and (y > number_input):
                print(f'Число в последовательности меньше введенного: {x}. \n'
                      f'Число в последовательности большее или равное введенному: {y}.'
                      f'\nНомер искомого элемента, меньшего введенного: {index-1}.')
